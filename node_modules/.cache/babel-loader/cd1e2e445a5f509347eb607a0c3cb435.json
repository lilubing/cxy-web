{"remainingRequest":"/Users/work/webworkspace/cxy-web/node_modules/babel-loader/lib/index.js!/Users/work/webworkspace/cxy-web/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/work/webworkspace/cxy-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/work/webworkspace/cxy-web/src/components/TreeSelect/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/work/webworkspace/cxy-web/src/components/TreeSelect/index.vue","mtime":1611049640257},{"path":"/Users/work/webworkspace/cxy-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/work/webworkspace/cxy-web/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/work/webworkspace/cxy-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/work/webworkspace/cxy-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5tYXAiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5udW1iZXIuY29uc3RydWN0b3IiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLWNvbGxlY3Rpb25zLmZvci1lYWNoIjsKLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KZXhwb3J0IGRlZmF1bHQgewogIG5hbWU6ICdUcmVlU2VsZWN0JywKICAvLyBwcm9wczogWyJjbGVhciJdLAogIHByb3BzOiB7CiAgICAvLyDmoJHnu5PmnoTmlbDmja4KICAgIGRhdGE6IHsKICAgICAgdHlwZTogQXJyYXksCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQogICAgfSwKICAgIC8vIOaYr+WQpuWPr+mAieagueiKgueCuQogICAgcm9vdE5vZGVDaGljazogQm9vbGVhbiwKICAgIC8vIOaYr+WQpua4heepuuaVsOaNrgogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHZ1ZS9yZXF1aXJlLWRlZmF1bHQtcHJvcAogICAgY2xlYXI6IE51bWJlciwKICAgIGRlZmF1bHRQcm9wczogewogICAgICB0eXBlOiBPYmplY3QsCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiB7fTsKICAgICAgfQogICAgfSwKICAgIC8vIOmFjee9ruaYr+WQpuWPr+WkmumAiQogICAgbXVsdGlwbGU6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICB9CiAgICB9LAogICAgbm9kZUtleTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiAnaWQnOwogICAgICB9CiAgICB9LAogICAgLy8g5pi+56S65aSN6YCJ5qGG5oOF5Ya15LiL77yM5piv5ZCm5Lil5qC86YG15b6q54i25a2Q5LiN5LqS55u45YWz6IGUCiAgICBjaGVja1N0cmljdGx5OiB7CiAgICAgIHR5cGU6IEJvb2xlYW4sCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgfSwKICAgIC8vIOm7mOiupOmAieS4reeahOiKgueCuWtleeaVsOe7hAogICAgY2hlY2tlZEtleXM6IHsKICAgICAgdHlwZTogQXJyYXksCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiBbXTsKICAgICAgfQogICAgfSwKICAgIHdpZHRoOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIDI1MDsKICAgICAgfQogICAgfSwKICAgIGhlaWdodDogewogICAgICB0eXBlOiBOdW1iZXIsCiAgICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkgewogICAgICAgIHJldHVybiAzMDA7CiAgICAgIH0KICAgIH0KICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBkZWZhdWx0Q2hlY2tlZEtleXM6IFtdLAogICAgICBpc1Nob3dTZWxlY3Q6IGZhbHNlLAogICAgICAvLyDmmK/lkKbmmL7npLrmoJHnirbpgInmi6nlmagKICAgICAgb3B0aW9uczogW10sCiAgICAgIHNlbGVjdGVkRGF0YTogW10sCiAgICAgIC8vIOmAieS4reeahOiKgueCuQogICAgICBzdHlsZTogJ3dpZHRoOicgKyB0aGlzLndpZHRoICsgJ3B4OycgKyAnaGVpZ2h0OicgKyB0aGlzLmhlaWdodCArICdweDsnLAogICAgICBzZWxlY3RTdHlsZTogJ3dpZHRoOicgKyAodGhpcy53aWR0aCArIDI0KSArICdweDsnLAogICAgICBjaGVja2VkSWRzOiBbXSwKICAgICAgY2hlY2tlZERhdGE6IFtdCiAgICB9OwogIH0sCiAgd2F0Y2g6IHsKICAgIGlzU2hvd1NlbGVjdDogZnVuY3Rpb24gaXNTaG93U2VsZWN0KHZhbCkgewogICAgICAvLyDpmpDol49zZWxlY3Toh6rluKbnmoTkuIvmi4nmoYYKICAgICAgdGhpcy4kcmVmcy5zZWxlY3QuYmx1cigpOwogICAgfSwKICAgIGNsZWFyOiBmdW5jdGlvbiBjbGVhcihuLCBvKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICAvLyDnrq3lpLTlh73mlbAgIOS4jeeEtuS8muWPkeeUn3RoaXPmlLnlj5gKICAgICAgaWYgKG4gIT09IDApIHsKICAgICAgICB0aGlzLnNlbGVjdGVkRGF0YSA9IFtdOwogICAgICAgIHRoaXMuJG5leHRUaWNrKGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzLiRyZWZzLnRyZWUuc2V0Q2hlY2tlZEtleXMoW10pOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAogICAgc2VsZWN0ZWREYXRhOiBmdW5jdGlvbiBzZWxlY3RlZERhdGEobmV3RGF0YSwgb2xkRGF0YSkgewogICAgICB0aGlzLnBvcG92ZXJIaWRlKCk7CgogICAgICBpZiAobmV3RGF0YSA9PT0gdW5kZWZpbmVkIHx8IG5ld0RhdGEgPT09IG51bGwgfHwgbmV3RGF0YSA9PT0gW10gfHwgbmV3RGF0YS5sZW5ndGggPT09IDApIHsKICAgICAgICB0aGlzLiRyZWZzLnRyZWUuc2V0Q2hlY2tlZEtleXMoW10pOwogICAgICB9CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgaWYgKHRoaXMuY2hlY2tlZEtleXMubGVuZ3RoID4gMCkgewogICAgICBpZiAodGhpcy5tdWx0aXBsZSkgewogICAgICAgIHRoaXMuZGVmYXVsdENoZWNrZWRLZXlzID0gdGhpcy5jaGVja2VkS2V5czsKICAgICAgICB0aGlzLnNlbGVjdGVkRGF0YSA9IHRoaXMuY2hlY2tlZEtleXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICB2YXIgbm9kZSA9IF90aGlzMi4kcmVmcy50cmVlLmdldE5vZGUoaXRlbSk7CgogICAgICAgICAgcmV0dXJuIG5vZGUubGFiZWw7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLmNoZWNrZWRLZXlzWzBdOwogICAgICAgIHRoaXMuJHJlZnMudHJlZS5zZXRDdXJyZW50S2V5KGl0ZW0pOwogICAgICAgIHZhciBub2RlID0gdGhpcy4kcmVmcy50cmVlLmdldE5vZGUoaXRlbSk7CiAgICAgICAgdGhpcy5zZWxlY3RlZERhdGEgPSBub2RlLmxhYmVsOwogICAgICB9CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICBwb3BvdmVySGlkZTogZnVuY3Rpb24gcG9wb3ZlckhpZGUoKSB7CiAgICAgIGlmICh0aGlzLm11bHRpcGxlKSB7CiAgICAgICAgdGhpcy5jaGVja2VkSWRzID0gdGhpcy4kcmVmcy50cmVlLmdldENoZWNrZWRLZXlzKCk7IC8vIOaJgOacieiiq+mAieS4reeahOiKgueCueeahCBrZXkg5omA57uE5oiQ55qE5pWw57uE5pWw5o2uCgogICAgICAgIHRoaXMuY2hlY2tlZERhdGEgPSB0aGlzLiRyZWZzLnRyZWUuZ2V0Q2hlY2tlZE5vZGVzKCk7IC8vIOaJgOacieiiq+mAieS4reeahOiKgueCueaJgOe7hOaIkOeahOaVsOe7hOaVsOaNrgogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuY2hlY2tlZElkcyA9IHRoaXMuJHJlZnMudHJlZS5nZXRDdXJyZW50S2V5KCk7CiAgICAgICAgdGhpcy5jaGVja2VkRGF0YSA9IHRoaXMuJHJlZnMudHJlZS5nZXRDdXJyZW50Tm9kZSgpOwogICAgICB9CgogICAgICB0aGlzLiRlbWl0KCdwb3BvdmVySGlkZScsIHRoaXMuY2hlY2tlZElkcywgdGhpcy5jaGVja2VkRGF0YSk7CiAgICB9LAogICAgLy8g6IqC54K56KKr54K55Ye75pe255qE5Zue6LCDLOi/lOWbnuiiq+eCueWHu+eahOiKgueCueaVsOaNrgogICAgaGFuZGxlTm9kZUNsaWNrOiBmdW5jdGlvbiBoYW5kbGVOb2RlQ2xpY2soZGF0YSwgbm9kZSkgewogICAgICBpZiAoIXRoaXMubXVsdGlwbGUpIHsKICAgICAgICB2YXIgdG1wTWFwID0ge307CiAgICAgICAgdG1wTWFwLnZhbHVlID0gbm9kZS5rZXk7CiAgICAgICAgdG1wTWFwLmxhYmVsID0gbm9kZS5sYWJlbDsKICAgICAgICB0aGlzLm9wdGlvbnMgPSBbXTsKICAgICAgICB0aGlzLm9wdGlvbnMucHVzaCh0bXBNYXApOwogICAgICAgIHRoaXMuc2VsZWN0ZWREYXRhID0gbm9kZS5sYWJlbDsKICAgICAgICB0aGlzLmlzU2hvd1NlbGVjdCA9ICF0aGlzLmlzU2hvd1NlbGVjdDsKICAgICAgfQogICAgfSwKICAgIC8vIOiKgueCuemAieS4reeKtuaAgeWPkeeUn+WPmOWMluaXtueahOWbnuiwgwogICAgaGFuZGxlQ2hlY2tDaGFuZ2U6IGZ1bmN0aW9uIGhhbmRsZUNoZWNrQ2hhbmdlKCkgewogICAgICB2YXIgX3RoaXMzID0gdGhpczsKCiAgICAgIHZhciBjaGVja2VkS2V5cyA9IHRoaXMuJHJlZnMudHJlZS5nZXRDaGVja2VkS2V5cygpOyAvLyDmiYDmnInooqvpgInkuK3nmoToioLngrnnmoQga2V5IOaJgOe7hOaIkOeahOaVsOe7hOaVsOaNrgoKICAgICAgdGhpcy5vcHRpb25zID0gW107CgogICAgICBpZiAoIXRoaXMucm9vdE5vZGVDaGljaykgewogICAgICAgIGNoZWNrZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICAgIHZhciBub2RlID0gX3RoaXMzLiRyZWZzLnRyZWUuZ2V0Tm9kZShpdGVtKTsgLy8g5omA5pyJ6KKr6YCJ5Lit55qE6IqC54K55a+55bqU55qEbm9kZQoKCiAgICAgICAgICB2YXIgdG1wTWFwID0ge307CgogICAgICAgICAgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGggPT09IDApIHsKICAgICAgICAgICAgdG1wTWFwLnZhbHVlID0gbm9kZS5rZXk7CiAgICAgICAgICAgIHRtcE1hcC5sYWJlbCA9IG5vZGUubGFiZWw7CgogICAgICAgICAgICBfdGhpczMub3B0aW9ucy5wdXNoKHRtcE1hcCk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5vcHRpb25zID0gY2hlY2tlZEtleXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgICB2YXIgbm9kZSA9IF90aGlzMy4kcmVmcy50cmVlLmdldE5vZGUoaXRlbSk7IC8vIOaJgOacieiiq+mAieS4reeahOiKgueCueWvueW6lOeahG5vZGUKCgogICAgICAgICAgdmFyIHRtcE1hcCA9IHt9OwogICAgICAgICAgdG1wTWFwLnZhbHVlID0gbm9kZS5rZXk7CiAgICAgICAgICB0bXBNYXAubGFiZWwgPSBub2RlLmxhYmVsOwogICAgICAgICAgcmV0dXJuIHRtcE1hcDsKICAgICAgICB9KTsKICAgICAgfQoKICAgICAgdGhpcy5zZWxlY3RlZERhdGEgPSB0aGlzLm9wdGlvbnMubWFwKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW0ubGFiZWw7CiAgICAgIH0pOwogICAgfQogIH0KfTs="},{"version":3,"sources":["index.vue"],"names":[],"mappings":"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","sourcesContent":["<!--\n    /**\n     * 下拉选择树形组件，下拉框展示树形结构，提供选择某节点功能，方便其他模块调用\n     * @author lgh\n     * @date 2020-09-01\n     * 调用示例：\n     * <tree-select :height=\"400\" // 下拉框中树形高度\n     *              :width=\"200\" // 下拉框中树形宽度\n     *              :data=\"data\" // 树结构的数据\n     *              :defaultProps=\"defaultProps\" // 树结构的props\n     *              multiple   // 多选\n     *              :rootNodeChick=\"true\" // 是否可以选择根节点。默认 false ture 为可选。false 为不可选\n     *              checkStrictly // 多选时，严格遵循父子不互相关联\n     *              :nodeKey=\"nodeKey\"   // 绑定nodeKey，默认绑定'id'\n     *              :checkedKeys=\"defaultCheckedKeys\"  // 传递默认选中的节点key组成的数组\n     *              @popoverHide=\"popoverHide\"> // 事件有两个参数：第一个是所有选中的节点ID，第二个是所有选中的节点数据\n     *              </tree-select>\n     *\n     * import TreeSelect from \"@/utils/components/tree-select.vue\";\n     * components: { TreeSelect },\n     *\n     *数据格式\n     *let obj = {\n                    menuId: item.id,\n                    menuName: item.label,\n                    childrenList: children\n                  };\n     * 清空树的选中状态。只需要将clear 从 0 累加就可以。这里是监听的数据改变状态。不为 0 则清空数据。Number类型\n     */\n-->\n<template>\n  <div>\n    <div v-show=\"isShowSelect\" class=\"mask\" @click=\"isShowSelect = !isShowSelect\" />\n    <el-popover\n      v-model=\"isShowSelect\"\n      placement=\"bottom-start\"\n      :width=\"width\"\n      trigger=\"manual\"\n      clearable\n      @hide=\"popoverHide\"\n    >\n      <el-tree\n        ref=\"tree\"\n        class=\"common-tree\"\n        :style=\"style\"\n        clearable\n        :data=\"data\"\n        :props=\"defaultProps\"\n        :show-checkbox=\"multiple\"\n        :node-key=\"nodeKey\"\n        :check-strictly=\"checkStrictly\"\n        default-expand-all\n        :expand-on-click-node=\"false\"\n        :default-checked-keys=\"defaultCheckedKeys\"\n        :highlight-current=\"true\"\n        @node-click=\"handleNodeClick\"\n        @check-change=\"handleCheckChange\"\n      />\n      <el-select\n        slot=\"reference\"\n        ref=\"select\"\n        v-model=\"selectedData\"\n        :style=\"selectStyle\"\n        :multiple=\"multiple\"\n        clearable\n        class=\"tree-select\"\n        @click.native=\"isShowSelect = !isShowSelect\"\n      >\n        <el-option\n          v-for=\"item in options\"\n          :key=\"item.value\"\n          :label=\"item.label\"\n          :value=\"item.value\"\n        />\n      </el-select>\n    </el-popover>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'TreeSelect',\n  // props: [\"clear\"],\n  props: {\n    // 树结构数据\n    data: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    // 是否可选根节点\n    rootNodeChick: Boolean,\n    // 是否清空数据\n    // eslint-disable-next-line vue/require-default-prop\n    clear: Number,\n    defaultProps: {\n      type: Object,\n      default() {\n        return {}\n      }\n    },\n    // 配置是否可多选\n    multiple: {\n      type: Boolean,\n      default() {\n        return false\n      }\n    },\n    nodeKey: {\n      type: String,\n      default() {\n        return 'id'\n      }\n    },\n    // 显示复选框情况下，是否严格遵循父子不互相关联\n    checkStrictly: {\n      type: Boolean,\n      default() {\n        return false\n      }\n    },\n    // 默认选中的节点key数组\n    checkedKeys: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    width: {\n      type: Number,\n      default() {\n        return 250\n      }\n    },\n    height: {\n      type: Number,\n      default() {\n        return 300\n      }\n    }\n  },\n  data() {\n    return {\n      defaultCheckedKeys: [],\n      isShowSelect: false, // 是否显示树状选择器\n      options: [],\n      selectedData: [], // 选中的节点\n      style: 'width:' + this.width + 'px;' + 'height:' + this.height + 'px;',\n      selectStyle: 'width:' + (this.width + 24) + 'px;',\n      checkedIds: [],\n      checkedData: []\n    }\n  },\n  watch: {\n    isShowSelect(val) {\n      // 隐藏select自带的下拉框\n      this.$refs.select.blur()\n    },\n    clear: function(n, o) {\n      // 箭头函数  不然会发生this改变\n      if (n !== 0) {\n        this.selectedData = []\n        this.$nextTick(() => {\n          this.$refs.tree.setCheckedKeys([])\n        })\n      }\n    },\n    selectedData: function(newData, oldData) {\n      this.popoverHide()\n      if (\n        newData === undefined ||\n        newData === null ||\n        newData === [] ||\n        newData.length === 0\n      ) { this.$refs.tree.setCheckedKeys([]) }\n    }\n  },\n  mounted() {\n    if (this.checkedKeys.length > 0) {\n      if (this.multiple) {\n        this.defaultCheckedKeys = this.checkedKeys\n        this.selectedData = this.checkedKeys.map(item => {\n          var node = this.$refs.tree.getNode(item)\n          return node.label\n        })\n      } else {\n        var item = this.checkedKeys[0]\n        this.$refs.tree.setCurrentKey(item)\n        var node = this.$refs.tree.getNode(item)\n        this.selectedData = node.label\n      }\n    }\n  },\n  methods: {\n    popoverHide() {\n      if (this.multiple) {\n        this.checkedIds = this.$refs.tree.getCheckedKeys() // 所有被选中的节点的 key 所组成的数组数据\n        this.checkedData = this.$refs.tree.getCheckedNodes() // 所有被选中的节点所组成的数组数据\n      } else {\n        this.checkedIds = this.$refs.tree.getCurrentKey()\n        this.checkedData = this.$refs.tree.getCurrentNode()\n      }\n      this.$emit('popoverHide', this.checkedIds, this.checkedData)\n    },\n    // 节点被点击时的回调,返回被点击的节点数据\n    handleNodeClick(data, node) {\n      if (!this.multiple) {\n        const tmpMap = {}\n        tmpMap.value = node.key\n        tmpMap.label = node.label\n        this.options = []\n        this.options.push(tmpMap)\n        this.selectedData = node.label\n        this.isShowSelect = !this.isShowSelect\n      }\n    },\n    // 节点选中状态发生变化时的回调\n    handleCheckChange() {\n      var checkedKeys = this.$refs.tree.getCheckedKeys() // 所有被选中的节点的 key 所组成的数组数据\n      this.options = []\n      if (!this.rootNodeChick) {\n        checkedKeys.forEach(item => {\n          var node = this.$refs.tree.getNode(item) // 所有被选中的节点对应的node\n          const tmpMap = {}\n          if (node.childNodes.length === 0) {\n            tmpMap.value = node.key\n            tmpMap.label = node.label\n            this.options.push(tmpMap)\n          }\n        })\n      } else {\n        this.options = checkedKeys.map(item => {\n          var node = this.$refs.tree.getNode(item) // 所有被选中的节点对应的node\n          const tmpMap = {}\n          tmpMap.value = node.key\n          tmpMap.label = node.label\n          return tmpMap\n        })\n      }\n      this.selectedData = this.options.map(item => {\n        return item.label\n      })\n    }\n  }\n}\n</script>\n\n<style scoped>\n.mask {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  opacity: 0;\n}\n.common-tree {\n  overflow: auto;\n}\n</style>\n\n<style>\n.tree-select .el-select__tags .el-tag .el-tag__close {\n  display: none;\n}\n.tree-select .el-select__tags .el-tag .el-icon-close {\n  display: none;\n}\n</style>\n"],"sourceRoot":"src/components/TreeSelect"}]}