{"remainingRequest":"/Users/work/webworkspace/cxy-web/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/work/webworkspace/cxy-web/src/components/TreeSelect/index.vue?vue&type=style&index=0&id=3b6dbb26&scoped=true&lang=css&","dependencies":[{"path":"/Users/work/webworkspace/cxy-web/src/components/TreeSelect/index.vue","mtime":1611049640257},{"path":"/Users/work/webworkspace/cxy-web/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/work/webworkspace/cxy-web/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/work/webworkspace/cxy-web/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/work/webworkspace/cxy-web/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/work/webworkspace/cxy-web/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLm1hc2sgewogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKICBwb3NpdGlvbjogZml4ZWQ7CiAgdG9wOiAwOwogIGxlZnQ6IDA7CiAgb3BhY2l0eTogMDsKfQouY29tbW9uLXRyZWUgewogIG92ZXJmbG93OiBhdXRvOwp9Cg=="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/components/TreeSelect","sourcesContent":["<!--\n    /**\n     * 下拉选择树形组件，下拉框展示树形结构，提供选择某节点功能，方便其他模块调用\n     * @author lgh\n     * @date 2020-09-01\n     * 调用示例：\n     * <tree-select :height=\"400\" // 下拉框中树形高度\n     *              :width=\"200\" // 下拉框中树形宽度\n     *              :data=\"data\" // 树结构的数据\n     *              :defaultProps=\"defaultProps\" // 树结构的props\n     *              multiple   // 多选\n     *              :rootNodeChick=\"true\" // 是否可以选择根节点。默认 false ture 为可选。false 为不可选\n     *              checkStrictly // 多选时，严格遵循父子不互相关联\n     *              :nodeKey=\"nodeKey\"   // 绑定nodeKey，默认绑定'id'\n     *              :checkedKeys=\"defaultCheckedKeys\"  // 传递默认选中的节点key组成的数组\n     *              @popoverHide=\"popoverHide\"> // 事件有两个参数：第一个是所有选中的节点ID，第二个是所有选中的节点数据\n     *              </tree-select>\n     *\n     * import TreeSelect from \"@/utils/components/tree-select.vue\";\n     * components: { TreeSelect },\n     *\n     *数据格式\n     *let obj = {\n                    menuId: item.id,\n                    menuName: item.label,\n                    childrenList: children\n                  };\n     * 清空树的选中状态。只需要将clear 从 0 累加就可以。这里是监听的数据改变状态。不为 0 则清空数据。Number类型\n     */\n-->\n<template>\n  <div>\n    <div v-show=\"isShowSelect\" class=\"mask\" @click=\"isShowSelect = !isShowSelect\" />\n    <el-popover\n      v-model=\"isShowSelect\"\n      placement=\"bottom-start\"\n      :width=\"width\"\n      trigger=\"manual\"\n      clearable\n      @hide=\"popoverHide\"\n    >\n      <el-tree\n        ref=\"tree\"\n        class=\"common-tree\"\n        :style=\"style\"\n        clearable\n        :data=\"data\"\n        :props=\"defaultProps\"\n        :show-checkbox=\"multiple\"\n        :node-key=\"nodeKey\"\n        :check-strictly=\"checkStrictly\"\n        default-expand-all\n        :expand-on-click-node=\"false\"\n        :default-checked-keys=\"defaultCheckedKeys\"\n        :highlight-current=\"true\"\n        @node-click=\"handleNodeClick\"\n        @check-change=\"handleCheckChange\"\n      />\n      <el-select\n        slot=\"reference\"\n        ref=\"select\"\n        v-model=\"selectedData\"\n        :style=\"selectStyle\"\n        :multiple=\"multiple\"\n        clearable\n        class=\"tree-select\"\n        @click.native=\"isShowSelect = !isShowSelect\"\n      >\n        <el-option\n          v-for=\"item in options\"\n          :key=\"item.value\"\n          :label=\"item.label\"\n          :value=\"item.value\"\n        />\n      </el-select>\n    </el-popover>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'TreeSelect',\n  // props: [\"clear\"],\n  props: {\n    // 树结构数据\n    data: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    // 是否可选根节点\n    rootNodeChick: Boolean,\n    // 是否清空数据\n    // eslint-disable-next-line vue/require-default-prop\n    clear: Number,\n    defaultProps: {\n      type: Object,\n      default() {\n        return {}\n      }\n    },\n    // 配置是否可多选\n    multiple: {\n      type: Boolean,\n      default() {\n        return false\n      }\n    },\n    nodeKey: {\n      type: String,\n      default() {\n        return 'id'\n      }\n    },\n    // 显示复选框情况下，是否严格遵循父子不互相关联\n    checkStrictly: {\n      type: Boolean,\n      default() {\n        return false\n      }\n    },\n    // 默认选中的节点key数组\n    checkedKeys: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    width: {\n      type: Number,\n      default() {\n        return 250\n      }\n    },\n    height: {\n      type: Number,\n      default() {\n        return 300\n      }\n    }\n  },\n  data() {\n    return {\n      defaultCheckedKeys: [],\n      isShowSelect: false, // 是否显示树状选择器\n      options: [],\n      selectedData: [], // 选中的节点\n      style: 'width:' + this.width + 'px;' + 'height:' + this.height + 'px;',\n      selectStyle: 'width:' + (this.width + 24) + 'px;',\n      checkedIds: [],\n      checkedData: []\n    }\n  },\n  watch: {\n    isShowSelect(val) {\n      // 隐藏select自带的下拉框\n      this.$refs.select.blur()\n    },\n    clear: function(n, o) {\n      // 箭头函数  不然会发生this改变\n      if (n !== 0) {\n        this.selectedData = []\n        this.$nextTick(() => {\n          this.$refs.tree.setCheckedKeys([])\n        })\n      }\n    },\n    selectedData: function(newData, oldData) {\n      this.popoverHide()\n      if (\n        newData === undefined ||\n        newData === null ||\n        newData === [] ||\n        newData.length === 0\n      ) { this.$refs.tree.setCheckedKeys([]) }\n    }\n  },\n  mounted() {\n    if (this.checkedKeys.length > 0) {\n      if (this.multiple) {\n        this.defaultCheckedKeys = this.checkedKeys\n        this.selectedData = this.checkedKeys.map(item => {\n          var node = this.$refs.tree.getNode(item)\n          return node.label\n        })\n      } else {\n        var item = this.checkedKeys[0]\n        this.$refs.tree.setCurrentKey(item)\n        var node = this.$refs.tree.getNode(item)\n        this.selectedData = node.label\n      }\n    }\n  },\n  methods: {\n    popoverHide() {\n      if (this.multiple) {\n        this.checkedIds = this.$refs.tree.getCheckedKeys() // 所有被选中的节点的 key 所组成的数组数据\n        this.checkedData = this.$refs.tree.getCheckedNodes() // 所有被选中的节点所组成的数组数据\n      } else {\n        this.checkedIds = this.$refs.tree.getCurrentKey()\n        this.checkedData = this.$refs.tree.getCurrentNode()\n      }\n      this.$emit('popoverHide', this.checkedIds, this.checkedData)\n    },\n    // 节点被点击时的回调,返回被点击的节点数据\n    handleNodeClick(data, node) {\n      if (!this.multiple) {\n        const tmpMap = {}\n        tmpMap.value = node.key\n        tmpMap.label = node.label\n        this.options = []\n        this.options.push(tmpMap)\n        this.selectedData = node.label\n        this.isShowSelect = !this.isShowSelect\n      }\n    },\n    // 节点选中状态发生变化时的回调\n    handleCheckChange() {\n      var checkedKeys = this.$refs.tree.getCheckedKeys() // 所有被选中的节点的 key 所组成的数组数据\n      this.options = []\n      if (!this.rootNodeChick) {\n        checkedKeys.forEach(item => {\n          var node = this.$refs.tree.getNode(item) // 所有被选中的节点对应的node\n          const tmpMap = {}\n          if (node.childNodes.length === 0) {\n            tmpMap.value = node.key\n            tmpMap.label = node.label\n            this.options.push(tmpMap)\n          }\n        })\n      } else {\n        this.options = checkedKeys.map(item => {\n          var node = this.$refs.tree.getNode(item) // 所有被选中的节点对应的node\n          const tmpMap = {}\n          tmpMap.value = node.key\n          tmpMap.label = node.label\n          return tmpMap\n        })\n      }\n      this.selectedData = this.options.map(item => {\n        return item.label\n      })\n    }\n  }\n}\n</script>\n\n<style scoped>\n.mask {\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  top: 0;\n  left: 0;\n  opacity: 0;\n}\n.common-tree {\n  overflow: auto;\n}\n</style>\n\n<style>\n.tree-select .el-select__tags .el-tag .el-tag__close {\n  display: none;\n}\n.tree-select .el-select__tags .el-tag .el-icon-close {\n  display: none;\n}\n</style>\n"]}]}